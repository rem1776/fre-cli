#!/bin/bash
set -euo pipefail
set -x

# https://stackoverflow.com/questions/402377/using-getopts-to-process-long-and-short-command-line-options
TEMP=$(getopt -o x:p:P:T:t:shvc:D:d: --long xml:,platform:,target:,time:,help,mppnccombine-opts:,mail-list: -n 'frepp' -- "$@")
eval set -- "$TEMP"

# defaults
xml=
platform=
target=
time=
help=

# arg parsing
while true; do
    case "$1" in
        # required
        -x | --xml ) xml="$2"; shift 2 ;;
        -p | -P | --platform ) platform="$2"; shift 2 ;;
        -T | --target ) target="$2"; shift 2 ;;
        -t | --time ) time="$2"; shift 2 ;;

        # optional
        -h | --help ) help=true; shift ;;

        # ignored
        -v ) shift ;;
        -c ) shift 2 ;;
        -D ) shift 2 ;;
        -d ) shift 2 ;;
        -s ) shift ;;
        --mppnccombine-opts ) shift 2 ;;
        --mail-list ) shift 2 ;;
        
        -- ) shift; break ;;
        * ) break ;;
    esac
done
if [[ -n ${1-} ]]; then
    expname=$1
else
    expname=
fi

# If $FRE_DUALPP is set, then take two different actions
# 1. Append "_canopy" to pp, analysis, and history_refined directories created through the XML converter
# 2. Submit Bronx frepp as well
set +u
if [[ $FRE_DUALPP ]]; then
    dual=true
else
    dual=false
fi
set -u

# Help
usage="Usage: frepp --xml=XML --platform=PLATFORM --target=TARGET --time=YYYY EXP"
if [[ $help ]]; then
    echo $usage
    cat << EOF
################################################################################
FRE Canopy frepp wrapper to start Canopy postprocessing workflow with
traditional Bronx frepp usage.

Cylc implementation current settings used by this wrapper:
1. Workflow name is <expname>__<platform>__<target>
e.g. use cylc commands such as:

cylc workflow-state <expname>__<platform>__<target>

This is somewhat overly verbose and also not verbose enough
(i.e. does not include FRE STEM).
If you have suggestions please let the FRE team know.

2. Will not use unique run directories.
If the run directory exists you will need to remove it before re-installing.

################################################################################
What does this script do?
1. If workflow run-dir was previously installed,
   start postprocessing for a history file segment:

- Check if the workflow is running
- Check the task states
- Start cylc scheduler
- Trigger requested processing (-t YYYY)
- Exit

2. Otherwise, if workflow src-dir does not exist,
   configure the postprocessing:

- Checkout a fresh PP template
- Run the XML converter

3. Then, install and start the postprocessing for a history file segment
- Run the validation scripts
- Install the workflow
- Start cylc scheduler
- Trigger requested processing (-t YYYY)

################################################################################
Recovery steps and scenarios:
1. Something is terribly wrong with PP and you want to reconfigure and try again
- Stop cylc scheduler with "cylc stop --kill <name>"
- Remove run directory with "cylc clean <name>"
- Edit the configuration files in ~/cylc-src/<name>
- Run frepp again to reinstall and run the updated PP configuration.

2. Something is terribly wrong and you want a complete fresh start,
   or you want an update from the pp template repo.
- Stop cylc scheduler with "cylc stop <name> --kill"
- Remove run directory with "cylc clean <name>"
- Remove src directory with "rm -rf ~/cylc-src/<name>"
- Run frepp again to recheckout pp template, run xml converter, and install/run

################################################################################
Specific suggestions to recover from task failures:

1. refineDiag script failures are likely with a XML-converted configs
   for two reasons, so you will probably need to either adjust or remove them.
   To disable refineDiag,
   - set DO_REFINEDIAG=False, and
   - comment out HISTORY_DIR_REFINED

a. It may use something in the XML, using an xml shell variable that does not
   exist now. In these cases, you could rewrite the refineDiag script to
   not use the xmlDir shell variable or not use the script.
   For "refineDiag_atmos_cmip6.csh", it was included in the postprocessing
   template checkout with a small modification. Use this location:
   '\$CYLC_WORKFLOW_RUN_DIR/etc/refineDiag/refineDiag_atmos_cmip6.csh'.
   - set REFINEDIAG_SCRIPTS to that location

b. It may be a refineDiag script that does not generate .nc files
   as it was expected to do. FRE Bronx allows these side-effect refineDiags,
   and instead a new mechanism was invented for these scripts that
   do not generate netcdf output:
   - set DO_PREANALYSIS=True, and
   - PREANALYSIS_SCRIPT="/paath/to/script".

2. Many PP components in Bronx XMLs are doomed (in terms of failing to
   produce output and job failing) caused by using history files that do not
   exist, but do not cause problems for the other components. Currently,
   the Canopy pp template is not robust in terms of this error mode,
   so it's best to not process history files that do not exist.

   In the future, diag manager metadata output will provide a catalog
   of history output that the validators will check against. For now,
   a simple checker exists, but you must manually generate the
   history output list ("history-manifest" file). 

   Generate the file with a simple listing of the history tarfile.
   You can append a history_refined tarfile as well. Then, the validator
   will report on PP components you have specified
   (PP_COMPONENTS) but that do not exist in the history-manifest file.

   tar -tf /path/to/history/YYYYMMDD.nc.tar | sort > history-manifest

   To run the configuration validation:

cd ~/cylc-src/<name>
rose macro --validate

   It is a good idea to not include pp components (PP_COMPONENTS) that
   include history files that do not exist.

   In all cases it is recommended to remove validation errors.
   See README.md for general configuration instructions.
EOF
    exit 0
fi

# check for all options
if [[ $xml ]]; then
    xml=$(readlink -f $xml)
    if [[ -f $xml ]]; then
        echo "using $xml"
    else
        echo "XML '$xml' does not exist"
        exit 1
    fi
else
    echo $usage
    exit 1
fi

if [[ $platform ]]; then
    echo "using $platform"
else
    echo $usage
    exit 1
fi

if [[ $target ]]; then
    echo "using $target"
else
    echo $usage
    exit 1
fi

if [[ $time ]]; then
    echo "using $time"
else
    echo $usage
    exit 1
fi

if [[ $expname ]]; then
    echo "using $expname"
else
    echo $usage
    exit 1
fi

cylc --version
if cylc cycle-point $time; then
    time_iso=$(cylc cycle-point $time --template CCYYMMDDT0000Z)
else
    echo "Time '$time' not a valid ISO8601 date"
    exit 1
fi

# Start bronx dual-pp
if [[ $dual == true ]]; then
    $FRE_COMMANDS_HOME/bin/frepp -x $xml -P $platform -T $target -t $time -D '' $expname -v -s
fi

# Set the cylc workflow name to <expname>_<platform>_<target>
# use the default workflow source convention
name=${expname}__${platform}__$target
rundir="$HOME/cylc-run/$name"
srcdir="$HOME/cylc-src/$name"
echo Workflow name: $name
echo Run directory: $rundir
echo Src directory: $srcdir

# Start postprocessing for a history file segment (workflow was previously installed)
if [[ -d $rundir ]]; then
    echo "Run directory '$rundir' exists, so will now try to start it"
    cylc scan
    cylc workflow-state $name
    if cylc workflow-state $name | grep failed; then
        cat << EOF
################################################################################
Unfortunately, there are failed tasks, probably caused by refineDiag errors
or try to use a history file that does not exist.

While Cylc workflows can be configured to handle failure gracefully,
this workflow is not yet set to do this, so currently it's recommended
to reconfigure your postprocessing to remove task errors.

For some suggestions to recover from the above most common errors, see:

frepp --help
################################################################################
EOF
    fi
    # sometimes this hangs for unknown reasons
    # So for now we'll add --debug to try to diagnose it, and
    # use /bin/timeout to exit after 10 min
    timeout 10m cylc play --debug $name
    sleep 20
    cylc trigger $name//$time_iso/pp-starter
    exit 0
fi

# Checkout postprocessing template and configure
if [[ ! -d $srcdir ]]; then
    echo "Workflow source directory '$srcdir' does not exist, so will now try to checkout template"

    # checkout
    mkdir -p $HOME/cylc-src
    cd $HOME/cylc-src
    # try to reduce checkout size with depth=1
    #git clone --depth=1 --recursive git@gitlab.gfdl.noaa.gov:fre2/workflows/postprocessing.git $name
    git clone --depth=1 --recursive https://gitlab.gfdl.noaa.gov/fre2/workflows/postprocessing.git $name

    # xml converter
    cd $srcdir
    if [[ $dual == true ]]; then
        bin/fre-bronx-to-canopy.py -x $xml -p $platform -t $target -e $expname -v --dual
    else
        bin/fre-bronx-to-canopy.py -x $xml -p $platform -t $target -e $expname -v
    fi
fi

# validate configuration
cd $srcdir
if ! rose macro --validate; then
    cat << EOF
################################################################################
Configuration may not be valid.

In general, Canopy configurations should pass all available validation scripts.
To run them,

cd $HOME/cylc-src/$name
rose macro --validate

Most validation errors reflect configurations problems that should be corrected.
The exceptions are:
1. PP_DIR will be created if it does not exist
2. HISTORY_DIR_REFINED will be created if it does not exist,
   assuming DO_REFINEDIAG is also set

See README.md for general configuration instructions.
################################################################################
EOF
fi
cylc validate .

# Install
cylc install --no-run-name $name

# Start
cylc play $name
sleep 20
cylc trigger $name//$time_iso/pp-starter
exit 0
